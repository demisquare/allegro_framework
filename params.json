{"name":"allegro_framework","tagline":"Small framework written in C using Allegro 5.","body":"allegro_framework\r\n=================\r\n\r\nA small framework written in C for use with the Allegro 5 library. The main\r\npurpose of the framework is to make it easy to quickly get going with a project\r\n- thus it could be beneficial for prototyping new ideas (for example in gamejams  \r\nsuch as ludum dare) as well as for newbies who just want to try out allegro without\r\nhaving to bother with all the required setup (e.g. event queues, addons, etc).\r\n\r\nSee `allegro_framework.h` for more detailed documentation of the framework,\r\nand the example below for a quick intro on how to use it.\r\n\r\nFeatures\r\n--------\r\n\r\n### Initializes Allegro ###\r\n\r\n`init_framework()` will setup allegro, useful addons, and create the basic things we need, such as an event queue\r\nand a display.\r\n\r\n### Game loop ###\r\n\r\n`run_game_loop()` starts the game loop. This function will call the two callbacks that you provide to the function until you\r\nask the game to quit.\r\n\r\n### Simplified input ###\r\n\r\nThe input from keyboard and mouse is polled each frame. Functions, such as `is_key_down()`, should be used in the update method defined\r\nby the user in order to check for the input.\r\n\r\n### Error handling ###\r\n\r\nUse `log_error()` to log an error message which will forcefully quit the program. `destroy_framework()` is\r\ncalled automatically and will clean up everything that the framework has put in place. Use `atexit()` if you want to\r\nautomatically clean up your own stuff when errors happen.\r\n\r\n### Logging ###\r\n\r\nSimple logfile functionality exists. It was mostly implemented because the framework somehow needs to be able to\r\nreport when errors happen. Use `log_message()` for simple debug messages, otherwise `log_warning()` for non-fatal errors and `log_error()`\r\nfor fatal errors.\r\n\r\n### Random number generation ###\r\n\r\n* Uses `rand()`, and `srand()` is called in `init_framework()`.\r\n* Random number generation between a range (e.g. `get_random_int()`).\r\n* `one_in()` and `roll_dice()`\r\n\r\n### Misc ###\r\n\r\n* Waiting for keypress function.\r\n* Alt-tab behavior (whether the game should pause when it's not in focus).\r\n* Alt-enter toggles fullscreen mode.\r\n\r\n### Math & Collision detection ###\r\n\r\n* Useful constants, structs and functions for detecting collisions.\r\n\r\nexample\r\n-------\r\n\r\n```c++\r\n// example: a bouncing rectangle\r\n#include \"allegro_framework.h\"\r\n\r\nRectangle r = { 50, 50, 50, 50 };\r\nVelocity v = { 3, 3 };\r\n\r\nvoid update()\r\n{\r\n    if (is_key_down(ALLEGRO_KEY_ESCAPE)) {\r\n        quit();\r\n    }\r\n\r\n    r.x += v.dx;\r\n    r.y += v.dy;\r\n\r\n    if (r.x < 0 || r.x + r.w > get_window_width()) {\r\n        v.dx = -v.dx;\r\n    }\r\n\r\n    if (r.y < 0 || r.y + r.h > get_window_height()) {\r\n        v.dy = -v.dy;\r\n    }\r\n}\r\n\r\nvoid render()\r\n{\r\n    al_draw_filled_rectangle(r.x, r.y, r.x + r.w, r.y + r.h, red_color);\r\n}\r\n\r\nint main(int argc, char *argv[])\r\n{\r\n    // must be called first!\r\n    init_framework(\"example\", 640, 480, false);\r\n\r\n    // the game loop runs until we call quit()\r\n    run_game_loop(update, render);\r\n\r\n    return 0;\r\n}\r\n```\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}